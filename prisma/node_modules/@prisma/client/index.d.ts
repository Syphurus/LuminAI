
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model GeneratedImage
 * 
 */
export type GeneratedImage = $Result.DefaultSelection<Prisma.$GeneratedImagePayload>
/**
 * Model GeneratedVideo
 * 
 */
export type GeneratedVideo = $Result.DefaultSelection<Prisma.$GeneratedVideoPayload>
/**
 * Model GeneratedSummary
 * 
 */
export type GeneratedSummary = $Result.DefaultSelection<Prisma.$GeneratedSummaryPayload>
/**
 * Model GeneratedGhibli
 * 
 */
export type GeneratedGhibli = $Result.DefaultSelection<Prisma.$GeneratedGhibliPayload>
/**
 * Model GeneratedSVG
 * 
 */
export type GeneratedSVG = $Result.DefaultSelection<Prisma.$GeneratedSVGPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more GeneratedImages
 * const generatedImages = await prisma.generatedImage.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more GeneratedImages
   * const generatedImages = await prisma.generatedImage.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.generatedImage`: Exposes CRUD operations for the **GeneratedImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedImages
    * const generatedImages = await prisma.generatedImage.findMany()
    * ```
    */
  get generatedImage(): Prisma.GeneratedImageDelegate<ExtArgs>;

  /**
   * `prisma.generatedVideo`: Exposes CRUD operations for the **GeneratedVideo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedVideos
    * const generatedVideos = await prisma.generatedVideo.findMany()
    * ```
    */
  get generatedVideo(): Prisma.GeneratedVideoDelegate<ExtArgs>;

  /**
   * `prisma.generatedSummary`: Exposes CRUD operations for the **GeneratedSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedSummaries
    * const generatedSummaries = await prisma.generatedSummary.findMany()
    * ```
    */
  get generatedSummary(): Prisma.GeneratedSummaryDelegate<ExtArgs>;

  /**
   * `prisma.generatedGhibli`: Exposes CRUD operations for the **GeneratedGhibli** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedGhiblis
    * const generatedGhiblis = await prisma.generatedGhibli.findMany()
    * ```
    */
  get generatedGhibli(): Prisma.GeneratedGhibliDelegate<ExtArgs>;

  /**
   * `prisma.generatedSVG`: Exposes CRUD operations for the **GeneratedSVG** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedSVGS
    * const generatedSVGS = await prisma.generatedSVG.findMany()
    * ```
    */
  get generatedSVG(): Prisma.GeneratedSVGDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    GeneratedImage: 'GeneratedImage',
    GeneratedVideo: 'GeneratedVideo',
    GeneratedSummary: 'GeneratedSummary',
    GeneratedGhibli: 'GeneratedGhibli',
    GeneratedSVG: 'GeneratedSVG'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'generatedImage' | 'generatedVideo' | 'generatedSummary' | 'generatedGhibli' | 'generatedSVG'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      GeneratedImage: {
        payload: Prisma.$GeneratedImagePayload<ExtArgs>
        fields: Prisma.GeneratedImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>
          }
          findFirst: {
            args: Prisma.GeneratedImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>
          }
          findMany: {
            args: Prisma.GeneratedImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>[]
          }
          create: {
            args: Prisma.GeneratedImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>
          }
          createMany: {
            args: Prisma.GeneratedImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GeneratedImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>
          }
          update: {
            args: Prisma.GeneratedImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>
          }
          deleteMany: {
            args: Prisma.GeneratedImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GeneratedImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedImagePayload>
          }
          aggregate: {
            args: Prisma.GeneratedImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGeneratedImage>
          }
          groupBy: {
            args: Prisma.GeneratedImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedImageCountArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedImageCountAggregateOutputType> | number
          }
        }
      }
      GeneratedVideo: {
        payload: Prisma.$GeneratedVideoPayload<ExtArgs>
        fields: Prisma.GeneratedVideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedVideoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedVideoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>
          }
          findFirst: {
            args: Prisma.GeneratedVideoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedVideoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>
          }
          findMany: {
            args: Prisma.GeneratedVideoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>[]
          }
          create: {
            args: Prisma.GeneratedVideoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>
          }
          createMany: {
            args: Prisma.GeneratedVideoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GeneratedVideoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>
          }
          update: {
            args: Prisma.GeneratedVideoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedVideoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedVideoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GeneratedVideoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedVideoPayload>
          }
          aggregate: {
            args: Prisma.GeneratedVideoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGeneratedVideo>
          }
          groupBy: {
            args: Prisma.GeneratedVideoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedVideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedVideoCountArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedVideoCountAggregateOutputType> | number
          }
        }
      }
      GeneratedSummary: {
        payload: Prisma.$GeneratedSummaryPayload<ExtArgs>
        fields: Prisma.GeneratedSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedSummaryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          findFirst: {
            args: Prisma.GeneratedSummaryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedSummaryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          findMany: {
            args: Prisma.GeneratedSummaryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>[]
          }
          create: {
            args: Prisma.GeneratedSummaryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          createMany: {
            args: Prisma.GeneratedSummaryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GeneratedSummaryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          update: {
            args: Prisma.GeneratedSummaryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedSummaryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedSummaryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GeneratedSummaryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          aggregate: {
            args: Prisma.GeneratedSummaryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGeneratedSummary>
          }
          groupBy: {
            args: Prisma.GeneratedSummaryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedSummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedSummaryCountArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedSummaryCountAggregateOutputType> | number
          }
        }
      }
      GeneratedGhibli: {
        payload: Prisma.$GeneratedGhibliPayload<ExtArgs>
        fields: Prisma.GeneratedGhibliFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedGhibliFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedGhibliFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>
          }
          findFirst: {
            args: Prisma.GeneratedGhibliFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedGhibliFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>
          }
          findMany: {
            args: Prisma.GeneratedGhibliFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>[]
          }
          create: {
            args: Prisma.GeneratedGhibliCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>
          }
          createMany: {
            args: Prisma.GeneratedGhibliCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GeneratedGhibliDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>
          }
          update: {
            args: Prisma.GeneratedGhibliUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedGhibliDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedGhibliUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GeneratedGhibliUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedGhibliPayload>
          }
          aggregate: {
            args: Prisma.GeneratedGhibliAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGeneratedGhibli>
          }
          groupBy: {
            args: Prisma.GeneratedGhibliGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedGhibliGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedGhibliCountArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedGhibliCountAggregateOutputType> | number
          }
        }
      }
      GeneratedSVG: {
        payload: Prisma.$GeneratedSVGPayload<ExtArgs>
        fields: Prisma.GeneratedSVGFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedSVGFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedSVGFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>
          }
          findFirst: {
            args: Prisma.GeneratedSVGFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedSVGFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>
          }
          findMany: {
            args: Prisma.GeneratedSVGFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>[]
          }
          create: {
            args: Prisma.GeneratedSVGCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>
          }
          createMany: {
            args: Prisma.GeneratedSVGCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GeneratedSVGDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>
          }
          update: {
            args: Prisma.GeneratedSVGUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedSVGDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedSVGUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GeneratedSVGUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GeneratedSVGPayload>
          }
          aggregate: {
            args: Prisma.GeneratedSVGAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGeneratedSVG>
          }
          groupBy: {
            args: Prisma.GeneratedSVGGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedSVGGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedSVGCountArgs<ExtArgs>,
            result: $Utils.Optional<GeneratedSVGCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model GeneratedImage
   */

  export type AggregateGeneratedImage = {
    _count: GeneratedImageCountAggregateOutputType | null
    _min: GeneratedImageMinAggregateOutputType | null
    _max: GeneratedImageMaxAggregateOutputType | null
  }

  export type GeneratedImageMinAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type GeneratedImageMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type GeneratedImageCountAggregateOutputType = {
    id: number
    userId: number
    prompt: number
    imageUrl: number
    createdAt: number
    _all: number
  }


  export type GeneratedImageMinAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    imageUrl?: true
    createdAt?: true
  }

  export type GeneratedImageMaxAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    imageUrl?: true
    createdAt?: true
  }

  export type GeneratedImageCountAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    imageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedImage to aggregate.
     */
    where?: GeneratedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedImages to fetch.
     */
    orderBy?: GeneratedImageOrderByWithRelationInput | GeneratedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedImages
    **/
    _count?: true | GeneratedImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedImageMaxAggregateInputType
  }

  export type GetGeneratedImageAggregateType<T extends GeneratedImageAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedImage[P]>
      : GetScalarType<T[P], AggregateGeneratedImage[P]>
  }




  export type GeneratedImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedImageWhereInput
    orderBy?: GeneratedImageOrderByWithAggregationInput | GeneratedImageOrderByWithAggregationInput[]
    by: GeneratedImageScalarFieldEnum[] | GeneratedImageScalarFieldEnum
    having?: GeneratedImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedImageCountAggregateInputType | true
    _min?: GeneratedImageMinAggregateInputType
    _max?: GeneratedImageMaxAggregateInputType
  }

  export type GeneratedImageGroupByOutputType = {
    id: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt: Date
    _count: GeneratedImageCountAggregateOutputType | null
    _min: GeneratedImageMinAggregateOutputType | null
    _max: GeneratedImageMaxAggregateOutputType | null
  }

  type GetGeneratedImageGroupByPayload<T extends GeneratedImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedImageGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedImageGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    prompt?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedImage"]>

  export type GeneratedImageSelectScalar = {
    id?: boolean
    userId?: boolean
    prompt?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }


  export type $GeneratedImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedImage"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      prompt: string
      imageUrl: string
      createdAt: Date
    }, ExtArgs["result"]["generatedImage"]>
    composites: {}
  }


  type GeneratedImageGetPayload<S extends boolean | null | undefined | GeneratedImageDefaultArgs> = $Result.GetResult<Prisma.$GeneratedImagePayload, S>

  type GeneratedImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneratedImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneratedImageCountAggregateInputType | true
    }

  export interface GeneratedImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedImage'], meta: { name: 'GeneratedImage' } }
    /**
     * Find zero or one GeneratedImage that matches the filter.
     * @param {GeneratedImageFindUniqueArgs} args - Arguments to find a GeneratedImage
     * @example
     * // Get one GeneratedImage
     * const generatedImage = await prisma.generatedImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratedImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedImageFindUniqueArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GeneratedImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GeneratedImageFindUniqueOrThrowArgs} args - Arguments to find a GeneratedImage
     * @example
     * // Get one GeneratedImage
     * const generatedImage = await prisma.generatedImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GeneratedImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GeneratedImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageFindFirstArgs} args - Arguments to find a GeneratedImage
     * @example
     * // Get one GeneratedImage
     * const generatedImage = await prisma.generatedImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratedImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedImageFindFirstArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GeneratedImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageFindFirstOrThrowArgs} args - Arguments to find a GeneratedImage
     * @example
     * // Get one GeneratedImage
     * const generatedImage = await prisma.generatedImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GeneratedImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GeneratedImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedImages
     * const generatedImages = await prisma.generatedImage.findMany()
     * 
     * // Get first 10 GeneratedImages
     * const generatedImages = await prisma.generatedImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedImageWithIdOnly = await prisma.generatedImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratedImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GeneratedImage.
     * @param {GeneratedImageCreateArgs} args - Arguments to create a GeneratedImage.
     * @example
     * // Create one GeneratedImage
     * const GeneratedImage = await prisma.generatedImage.create({
     *   data: {
     *     // ... data to create a GeneratedImage
     *   }
     * })
     * 
    **/
    create<T extends GeneratedImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedImageCreateArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GeneratedImages.
     *     @param {GeneratedImageCreateManyArgs} args - Arguments to create many GeneratedImages.
     *     @example
     *     // Create many GeneratedImages
     *     const generatedImage = await prisma.generatedImage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratedImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GeneratedImage.
     * @param {GeneratedImageDeleteArgs} args - Arguments to delete one GeneratedImage.
     * @example
     * // Delete one GeneratedImage
     * const GeneratedImage = await prisma.generatedImage.delete({
     *   where: {
     *     // ... filter to delete one GeneratedImage
     *   }
     * })
     * 
    **/
    delete<T extends GeneratedImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedImageDeleteArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GeneratedImage.
     * @param {GeneratedImageUpdateArgs} args - Arguments to update one GeneratedImage.
     * @example
     * // Update one GeneratedImage
     * const generatedImage = await prisma.generatedImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratedImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedImageUpdateArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GeneratedImages.
     * @param {GeneratedImageDeleteManyArgs} args - Arguments to filter GeneratedImages to delete.
     * @example
     * // Delete a few GeneratedImages
     * const { count } = await prisma.generatedImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratedImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedImages
     * const generatedImage = await prisma.generatedImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratedImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneratedImage.
     * @param {GeneratedImageUpsertArgs} args - Arguments to update or create a GeneratedImage.
     * @example
     * // Update or create a GeneratedImage
     * const generatedImage = await prisma.generatedImage.upsert({
     *   create: {
     *     // ... data to create a GeneratedImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedImage we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratedImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedImageUpsertArgs<ExtArgs>>
    ): Prisma__GeneratedImageClient<$Result.GetResult<Prisma.$GeneratedImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GeneratedImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageCountArgs} args - Arguments to filter GeneratedImages to count.
     * @example
     * // Count the number of GeneratedImages
     * const count = await prisma.generatedImage.count({
     *   where: {
     *     // ... the filter for the GeneratedImages we want to count
     *   }
     * })
    **/
    count<T extends GeneratedImageCountArgs>(
      args?: Subset<T, GeneratedImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedImageAggregateArgs>(args: Subset<T, GeneratedImageAggregateArgs>): Prisma.PrismaPromise<GetGeneratedImageAggregateType<T>>

    /**
     * Group by GeneratedImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedImageGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedImage model
   */
  readonly fields: GeneratedImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GeneratedImage model
   */ 
  interface GeneratedImageFieldRefs {
    readonly id: FieldRef<"GeneratedImage", 'String'>
    readonly userId: FieldRef<"GeneratedImage", 'String'>
    readonly prompt: FieldRef<"GeneratedImage", 'String'>
    readonly imageUrl: FieldRef<"GeneratedImage", 'String'>
    readonly createdAt: FieldRef<"GeneratedImage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GeneratedImage findUnique
   */
  export type GeneratedImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedImage to fetch.
     */
    where: GeneratedImageWhereUniqueInput
  }


  /**
   * GeneratedImage findUniqueOrThrow
   */
  export type GeneratedImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedImage to fetch.
     */
    where: GeneratedImageWhereUniqueInput
  }


  /**
   * GeneratedImage findFirst
   */
  export type GeneratedImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedImage to fetch.
     */
    where?: GeneratedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedImages to fetch.
     */
    orderBy?: GeneratedImageOrderByWithRelationInput | GeneratedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedImages.
     */
    cursor?: GeneratedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedImages.
     */
    distinct?: GeneratedImageScalarFieldEnum | GeneratedImageScalarFieldEnum[]
  }


  /**
   * GeneratedImage findFirstOrThrow
   */
  export type GeneratedImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedImage to fetch.
     */
    where?: GeneratedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedImages to fetch.
     */
    orderBy?: GeneratedImageOrderByWithRelationInput | GeneratedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedImages.
     */
    cursor?: GeneratedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedImages.
     */
    distinct?: GeneratedImageScalarFieldEnum | GeneratedImageScalarFieldEnum[]
  }


  /**
   * GeneratedImage findMany
   */
  export type GeneratedImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedImages to fetch.
     */
    where?: GeneratedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedImages to fetch.
     */
    orderBy?: GeneratedImageOrderByWithRelationInput | GeneratedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedImages.
     */
    cursor?: GeneratedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedImages.
     */
    skip?: number
    distinct?: GeneratedImageScalarFieldEnum | GeneratedImageScalarFieldEnum[]
  }


  /**
   * GeneratedImage create
   */
  export type GeneratedImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * The data needed to create a GeneratedImage.
     */
    data: XOR<GeneratedImageCreateInput, GeneratedImageUncheckedCreateInput>
  }


  /**
   * GeneratedImage createMany
   */
  export type GeneratedImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedImages.
     */
    data: GeneratedImageCreateManyInput | GeneratedImageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GeneratedImage update
   */
  export type GeneratedImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * The data needed to update a GeneratedImage.
     */
    data: XOR<GeneratedImageUpdateInput, GeneratedImageUncheckedUpdateInput>
    /**
     * Choose, which GeneratedImage to update.
     */
    where: GeneratedImageWhereUniqueInput
  }


  /**
   * GeneratedImage updateMany
   */
  export type GeneratedImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedImages.
     */
    data: XOR<GeneratedImageUpdateManyMutationInput, GeneratedImageUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedImages to update
     */
    where?: GeneratedImageWhereInput
  }


  /**
   * GeneratedImage upsert
   */
  export type GeneratedImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * The filter to search for the GeneratedImage to update in case it exists.
     */
    where: GeneratedImageWhereUniqueInput
    /**
     * In case the GeneratedImage found by the `where` argument doesn't exist, create a new GeneratedImage with this data.
     */
    create: XOR<GeneratedImageCreateInput, GeneratedImageUncheckedCreateInput>
    /**
     * In case the GeneratedImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedImageUpdateInput, GeneratedImageUncheckedUpdateInput>
  }


  /**
   * GeneratedImage delete
   */
  export type GeneratedImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
    /**
     * Filter which GeneratedImage to delete.
     */
    where: GeneratedImageWhereUniqueInput
  }


  /**
   * GeneratedImage deleteMany
   */
  export type GeneratedImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedImages to delete
     */
    where?: GeneratedImageWhereInput
  }


  /**
   * GeneratedImage without action
   */
  export type GeneratedImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedImage
     */
    select?: GeneratedImageSelect<ExtArgs> | null
  }



  /**
   * Model GeneratedVideo
   */

  export type AggregateGeneratedVideo = {
    _count: GeneratedVideoCountAggregateOutputType | null
    _min: GeneratedVideoMinAggregateOutputType | null
    _max: GeneratedVideoMaxAggregateOutputType | null
  }

  export type GeneratedVideoMinAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    videoUrl: string | null
    createdAt: Date | null
  }

  export type GeneratedVideoMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    videoUrl: string | null
    createdAt: Date | null
  }

  export type GeneratedVideoCountAggregateOutputType = {
    id: number
    userId: number
    prompt: number
    videoUrl: number
    createdAt: number
    _all: number
  }


  export type GeneratedVideoMinAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    videoUrl?: true
    createdAt?: true
  }

  export type GeneratedVideoMaxAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    videoUrl?: true
    createdAt?: true
  }

  export type GeneratedVideoCountAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    videoUrl?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedVideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedVideo to aggregate.
     */
    where?: GeneratedVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedVideos to fetch.
     */
    orderBy?: GeneratedVideoOrderByWithRelationInput | GeneratedVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedVideos
    **/
    _count?: true | GeneratedVideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedVideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedVideoMaxAggregateInputType
  }

  export type GetGeneratedVideoAggregateType<T extends GeneratedVideoAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedVideo[P]>
      : GetScalarType<T[P], AggregateGeneratedVideo[P]>
  }




  export type GeneratedVideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedVideoWhereInput
    orderBy?: GeneratedVideoOrderByWithAggregationInput | GeneratedVideoOrderByWithAggregationInput[]
    by: GeneratedVideoScalarFieldEnum[] | GeneratedVideoScalarFieldEnum
    having?: GeneratedVideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedVideoCountAggregateInputType | true
    _min?: GeneratedVideoMinAggregateInputType
    _max?: GeneratedVideoMaxAggregateInputType
  }

  export type GeneratedVideoGroupByOutputType = {
    id: string
    userId: string
    prompt: string
    videoUrl: string
    createdAt: Date
    _count: GeneratedVideoCountAggregateOutputType | null
    _min: GeneratedVideoMinAggregateOutputType | null
    _max: GeneratedVideoMaxAggregateOutputType | null
  }

  type GetGeneratedVideoGroupByPayload<T extends GeneratedVideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedVideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedVideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedVideoGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedVideoGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedVideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    prompt?: boolean
    videoUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedVideo"]>

  export type GeneratedVideoSelectScalar = {
    id?: boolean
    userId?: boolean
    prompt?: boolean
    videoUrl?: boolean
    createdAt?: boolean
  }


  export type $GeneratedVideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedVideo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      prompt: string
      videoUrl: string
      createdAt: Date
    }, ExtArgs["result"]["generatedVideo"]>
    composites: {}
  }


  type GeneratedVideoGetPayload<S extends boolean | null | undefined | GeneratedVideoDefaultArgs> = $Result.GetResult<Prisma.$GeneratedVideoPayload, S>

  type GeneratedVideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneratedVideoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneratedVideoCountAggregateInputType | true
    }

  export interface GeneratedVideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedVideo'], meta: { name: 'GeneratedVideo' } }
    /**
     * Find zero or one GeneratedVideo that matches the filter.
     * @param {GeneratedVideoFindUniqueArgs} args - Arguments to find a GeneratedVideo
     * @example
     * // Get one GeneratedVideo
     * const generatedVideo = await prisma.generatedVideo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratedVideoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedVideoFindUniqueArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GeneratedVideo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GeneratedVideoFindUniqueOrThrowArgs} args - Arguments to find a GeneratedVideo
     * @example
     * // Get one GeneratedVideo
     * const generatedVideo = await prisma.generatedVideo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GeneratedVideoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedVideoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GeneratedVideo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoFindFirstArgs} args - Arguments to find a GeneratedVideo
     * @example
     * // Get one GeneratedVideo
     * const generatedVideo = await prisma.generatedVideo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratedVideoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedVideoFindFirstArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GeneratedVideo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoFindFirstOrThrowArgs} args - Arguments to find a GeneratedVideo
     * @example
     * // Get one GeneratedVideo
     * const generatedVideo = await prisma.generatedVideo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GeneratedVideoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedVideoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GeneratedVideos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedVideos
     * const generatedVideos = await prisma.generatedVideo.findMany()
     * 
     * // Get first 10 GeneratedVideos
     * const generatedVideos = await prisma.generatedVideo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedVideoWithIdOnly = await prisma.generatedVideo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratedVideoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedVideoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GeneratedVideo.
     * @param {GeneratedVideoCreateArgs} args - Arguments to create a GeneratedVideo.
     * @example
     * // Create one GeneratedVideo
     * const GeneratedVideo = await prisma.generatedVideo.create({
     *   data: {
     *     // ... data to create a GeneratedVideo
     *   }
     * })
     * 
    **/
    create<T extends GeneratedVideoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedVideoCreateArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GeneratedVideos.
     *     @param {GeneratedVideoCreateManyArgs} args - Arguments to create many GeneratedVideos.
     *     @example
     *     // Create many GeneratedVideos
     *     const generatedVideo = await prisma.generatedVideo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratedVideoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedVideoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GeneratedVideo.
     * @param {GeneratedVideoDeleteArgs} args - Arguments to delete one GeneratedVideo.
     * @example
     * // Delete one GeneratedVideo
     * const GeneratedVideo = await prisma.generatedVideo.delete({
     *   where: {
     *     // ... filter to delete one GeneratedVideo
     *   }
     * })
     * 
    **/
    delete<T extends GeneratedVideoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedVideoDeleteArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GeneratedVideo.
     * @param {GeneratedVideoUpdateArgs} args - Arguments to update one GeneratedVideo.
     * @example
     * // Update one GeneratedVideo
     * const generatedVideo = await prisma.generatedVideo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratedVideoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedVideoUpdateArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GeneratedVideos.
     * @param {GeneratedVideoDeleteManyArgs} args - Arguments to filter GeneratedVideos to delete.
     * @example
     * // Delete a few GeneratedVideos
     * const { count } = await prisma.generatedVideo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratedVideoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedVideoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedVideos
     * const generatedVideo = await prisma.generatedVideo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratedVideoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedVideoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneratedVideo.
     * @param {GeneratedVideoUpsertArgs} args - Arguments to update or create a GeneratedVideo.
     * @example
     * // Update or create a GeneratedVideo
     * const generatedVideo = await prisma.generatedVideo.upsert({
     *   create: {
     *     // ... data to create a GeneratedVideo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedVideo we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratedVideoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedVideoUpsertArgs<ExtArgs>>
    ): Prisma__GeneratedVideoClient<$Result.GetResult<Prisma.$GeneratedVideoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GeneratedVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoCountArgs} args - Arguments to filter GeneratedVideos to count.
     * @example
     * // Count the number of GeneratedVideos
     * const count = await prisma.generatedVideo.count({
     *   where: {
     *     // ... the filter for the GeneratedVideos we want to count
     *   }
     * })
    **/
    count<T extends GeneratedVideoCountArgs>(
      args?: Subset<T, GeneratedVideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedVideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedVideoAggregateArgs>(args: Subset<T, GeneratedVideoAggregateArgs>): Prisma.PrismaPromise<GetGeneratedVideoAggregateType<T>>

    /**
     * Group by GeneratedVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedVideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedVideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedVideoGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedVideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedVideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedVideo model
   */
  readonly fields: GeneratedVideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedVideo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedVideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GeneratedVideo model
   */ 
  interface GeneratedVideoFieldRefs {
    readonly id: FieldRef<"GeneratedVideo", 'String'>
    readonly userId: FieldRef<"GeneratedVideo", 'String'>
    readonly prompt: FieldRef<"GeneratedVideo", 'String'>
    readonly videoUrl: FieldRef<"GeneratedVideo", 'String'>
    readonly createdAt: FieldRef<"GeneratedVideo", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GeneratedVideo findUnique
   */
  export type GeneratedVideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedVideo to fetch.
     */
    where: GeneratedVideoWhereUniqueInput
  }


  /**
   * GeneratedVideo findUniqueOrThrow
   */
  export type GeneratedVideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedVideo to fetch.
     */
    where: GeneratedVideoWhereUniqueInput
  }


  /**
   * GeneratedVideo findFirst
   */
  export type GeneratedVideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedVideo to fetch.
     */
    where?: GeneratedVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedVideos to fetch.
     */
    orderBy?: GeneratedVideoOrderByWithRelationInput | GeneratedVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedVideos.
     */
    cursor?: GeneratedVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedVideos.
     */
    distinct?: GeneratedVideoScalarFieldEnum | GeneratedVideoScalarFieldEnum[]
  }


  /**
   * GeneratedVideo findFirstOrThrow
   */
  export type GeneratedVideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedVideo to fetch.
     */
    where?: GeneratedVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedVideos to fetch.
     */
    orderBy?: GeneratedVideoOrderByWithRelationInput | GeneratedVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedVideos.
     */
    cursor?: GeneratedVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedVideos.
     */
    distinct?: GeneratedVideoScalarFieldEnum | GeneratedVideoScalarFieldEnum[]
  }


  /**
   * GeneratedVideo findMany
   */
  export type GeneratedVideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedVideos to fetch.
     */
    where?: GeneratedVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedVideos to fetch.
     */
    orderBy?: GeneratedVideoOrderByWithRelationInput | GeneratedVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedVideos.
     */
    cursor?: GeneratedVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedVideos.
     */
    skip?: number
    distinct?: GeneratedVideoScalarFieldEnum | GeneratedVideoScalarFieldEnum[]
  }


  /**
   * GeneratedVideo create
   */
  export type GeneratedVideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * The data needed to create a GeneratedVideo.
     */
    data: XOR<GeneratedVideoCreateInput, GeneratedVideoUncheckedCreateInput>
  }


  /**
   * GeneratedVideo createMany
   */
  export type GeneratedVideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedVideos.
     */
    data: GeneratedVideoCreateManyInput | GeneratedVideoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GeneratedVideo update
   */
  export type GeneratedVideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * The data needed to update a GeneratedVideo.
     */
    data: XOR<GeneratedVideoUpdateInput, GeneratedVideoUncheckedUpdateInput>
    /**
     * Choose, which GeneratedVideo to update.
     */
    where: GeneratedVideoWhereUniqueInput
  }


  /**
   * GeneratedVideo updateMany
   */
  export type GeneratedVideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedVideos.
     */
    data: XOR<GeneratedVideoUpdateManyMutationInput, GeneratedVideoUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedVideos to update
     */
    where?: GeneratedVideoWhereInput
  }


  /**
   * GeneratedVideo upsert
   */
  export type GeneratedVideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * The filter to search for the GeneratedVideo to update in case it exists.
     */
    where: GeneratedVideoWhereUniqueInput
    /**
     * In case the GeneratedVideo found by the `where` argument doesn't exist, create a new GeneratedVideo with this data.
     */
    create: XOR<GeneratedVideoCreateInput, GeneratedVideoUncheckedCreateInput>
    /**
     * In case the GeneratedVideo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedVideoUpdateInput, GeneratedVideoUncheckedUpdateInput>
  }


  /**
   * GeneratedVideo delete
   */
  export type GeneratedVideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
    /**
     * Filter which GeneratedVideo to delete.
     */
    where: GeneratedVideoWhereUniqueInput
  }


  /**
   * GeneratedVideo deleteMany
   */
  export type GeneratedVideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedVideos to delete
     */
    where?: GeneratedVideoWhereInput
  }


  /**
   * GeneratedVideo without action
   */
  export type GeneratedVideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedVideo
     */
    select?: GeneratedVideoSelect<ExtArgs> | null
  }



  /**
   * Model GeneratedSummary
   */

  export type AggregateGeneratedSummary = {
    _count: GeneratedSummaryCountAggregateOutputType | null
    _min: GeneratedSummaryMinAggregateOutputType | null
    _max: GeneratedSummaryMaxAggregateOutputType | null
  }

  export type GeneratedSummaryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    summary: string | null
    createdAt: Date | null
  }

  export type GeneratedSummaryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    summary: string | null
    createdAt: Date | null
  }

  export type GeneratedSummaryCountAggregateOutputType = {
    id: number
    userId: number
    prompt: number
    summary: number
    createdAt: number
    _all: number
  }


  export type GeneratedSummaryMinAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    summary?: true
    createdAt?: true
  }

  export type GeneratedSummaryMaxAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    summary?: true
    createdAt?: true
  }

  export type GeneratedSummaryCountAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    summary?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedSummary to aggregate.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedSummaries
    **/
    _count?: true | GeneratedSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedSummaryMaxAggregateInputType
  }

  export type GetGeneratedSummaryAggregateType<T extends GeneratedSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedSummary[P]>
      : GetScalarType<T[P], AggregateGeneratedSummary[P]>
  }




  export type GeneratedSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedSummaryWhereInput
    orderBy?: GeneratedSummaryOrderByWithAggregationInput | GeneratedSummaryOrderByWithAggregationInput[]
    by: GeneratedSummaryScalarFieldEnum[] | GeneratedSummaryScalarFieldEnum
    having?: GeneratedSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedSummaryCountAggregateInputType | true
    _min?: GeneratedSummaryMinAggregateInputType
    _max?: GeneratedSummaryMaxAggregateInputType
  }

  export type GeneratedSummaryGroupByOutputType = {
    id: string
    userId: string
    prompt: string
    summary: string
    createdAt: Date
    _count: GeneratedSummaryCountAggregateOutputType | null
    _min: GeneratedSummaryMinAggregateOutputType | null
    _max: GeneratedSummaryMaxAggregateOutputType | null
  }

  type GetGeneratedSummaryGroupByPayload<T extends GeneratedSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedSummaryGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    prompt?: boolean
    summary?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedSummary"]>

  export type GeneratedSummarySelectScalar = {
    id?: boolean
    userId?: boolean
    prompt?: boolean
    summary?: boolean
    createdAt?: boolean
  }


  export type $GeneratedSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedSummary"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      prompt: string
      summary: string
      createdAt: Date
    }, ExtArgs["result"]["generatedSummary"]>
    composites: {}
  }


  type GeneratedSummaryGetPayload<S extends boolean | null | undefined | GeneratedSummaryDefaultArgs> = $Result.GetResult<Prisma.$GeneratedSummaryPayload, S>

  type GeneratedSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneratedSummaryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneratedSummaryCountAggregateInputType | true
    }

  export interface GeneratedSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedSummary'], meta: { name: 'GeneratedSummary' } }
    /**
     * Find zero or one GeneratedSummary that matches the filter.
     * @param {GeneratedSummaryFindUniqueArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratedSummaryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSummaryFindUniqueArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GeneratedSummary that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GeneratedSummaryFindUniqueOrThrowArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GeneratedSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryFindFirstArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratedSummaryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSummaryFindFirstArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GeneratedSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryFindFirstOrThrowArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GeneratedSummaryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSummaryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GeneratedSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedSummaries
     * const generatedSummaries = await prisma.generatedSummary.findMany()
     * 
     * // Get first 10 GeneratedSummaries
     * const generatedSummaries = await prisma.generatedSummary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedSummaryWithIdOnly = await prisma.generatedSummary.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratedSummaryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSummaryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GeneratedSummary.
     * @param {GeneratedSummaryCreateArgs} args - Arguments to create a GeneratedSummary.
     * @example
     * // Create one GeneratedSummary
     * const GeneratedSummary = await prisma.generatedSummary.create({
     *   data: {
     *     // ... data to create a GeneratedSummary
     *   }
     * })
     * 
    **/
    create<T extends GeneratedSummaryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSummaryCreateArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GeneratedSummaries.
     *     @param {GeneratedSummaryCreateManyArgs} args - Arguments to create many GeneratedSummaries.
     *     @example
     *     // Create many GeneratedSummaries
     *     const generatedSummary = await prisma.generatedSummary.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratedSummaryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSummaryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GeneratedSummary.
     * @param {GeneratedSummaryDeleteArgs} args - Arguments to delete one GeneratedSummary.
     * @example
     * // Delete one GeneratedSummary
     * const GeneratedSummary = await prisma.generatedSummary.delete({
     *   where: {
     *     // ... filter to delete one GeneratedSummary
     *   }
     * })
     * 
    **/
    delete<T extends GeneratedSummaryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSummaryDeleteArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GeneratedSummary.
     * @param {GeneratedSummaryUpdateArgs} args - Arguments to update one GeneratedSummary.
     * @example
     * // Update one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratedSummaryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSummaryUpdateArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GeneratedSummaries.
     * @param {GeneratedSummaryDeleteManyArgs} args - Arguments to filter GeneratedSummaries to delete.
     * @example
     * // Delete a few GeneratedSummaries
     * const { count } = await prisma.generatedSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratedSummaryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSummaryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedSummaries
     * const generatedSummary = await prisma.generatedSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratedSummaryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSummaryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneratedSummary.
     * @param {GeneratedSummaryUpsertArgs} args - Arguments to update or create a GeneratedSummary.
     * @example
     * // Update or create a GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.upsert({
     *   create: {
     *     // ... data to create a GeneratedSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedSummary we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratedSummaryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSummaryUpsertArgs<ExtArgs>>
    ): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GeneratedSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryCountArgs} args - Arguments to filter GeneratedSummaries to count.
     * @example
     * // Count the number of GeneratedSummaries
     * const count = await prisma.generatedSummary.count({
     *   where: {
     *     // ... the filter for the GeneratedSummaries we want to count
     *   }
     * })
    **/
    count<T extends GeneratedSummaryCountArgs>(
      args?: Subset<T, GeneratedSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedSummaryAggregateArgs>(args: Subset<T, GeneratedSummaryAggregateArgs>): Prisma.PrismaPromise<GetGeneratedSummaryAggregateType<T>>

    /**
     * Group by GeneratedSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedSummaryGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedSummary model
   */
  readonly fields: GeneratedSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GeneratedSummary model
   */ 
  interface GeneratedSummaryFieldRefs {
    readonly id: FieldRef<"GeneratedSummary", 'String'>
    readonly userId: FieldRef<"GeneratedSummary", 'String'>
    readonly prompt: FieldRef<"GeneratedSummary", 'String'>
    readonly summary: FieldRef<"GeneratedSummary", 'String'>
    readonly createdAt: FieldRef<"GeneratedSummary", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GeneratedSummary findUnique
   */
  export type GeneratedSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where: GeneratedSummaryWhereUniqueInput
  }


  /**
   * GeneratedSummary findUniqueOrThrow
   */
  export type GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where: GeneratedSummaryWhereUniqueInput
  }


  /**
   * GeneratedSummary findFirst
   */
  export type GeneratedSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedSummaries.
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedSummaries.
     */
    distinct?: GeneratedSummaryScalarFieldEnum | GeneratedSummaryScalarFieldEnum[]
  }


  /**
   * GeneratedSummary findFirstOrThrow
   */
  export type GeneratedSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedSummaries.
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedSummaries.
     */
    distinct?: GeneratedSummaryScalarFieldEnum | GeneratedSummaryScalarFieldEnum[]
  }


  /**
   * GeneratedSummary findMany
   */
  export type GeneratedSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSummaries to fetch.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedSummaries.
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    distinct?: GeneratedSummaryScalarFieldEnum | GeneratedSummaryScalarFieldEnum[]
  }


  /**
   * GeneratedSummary create
   */
  export type GeneratedSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * The data needed to create a GeneratedSummary.
     */
    data: XOR<GeneratedSummaryCreateInput, GeneratedSummaryUncheckedCreateInput>
  }


  /**
   * GeneratedSummary createMany
   */
  export type GeneratedSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedSummaries.
     */
    data: GeneratedSummaryCreateManyInput | GeneratedSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GeneratedSummary update
   */
  export type GeneratedSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * The data needed to update a GeneratedSummary.
     */
    data: XOR<GeneratedSummaryUpdateInput, GeneratedSummaryUncheckedUpdateInput>
    /**
     * Choose, which GeneratedSummary to update.
     */
    where: GeneratedSummaryWhereUniqueInput
  }


  /**
   * GeneratedSummary updateMany
   */
  export type GeneratedSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedSummaries.
     */
    data: XOR<GeneratedSummaryUpdateManyMutationInput, GeneratedSummaryUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedSummaries to update
     */
    where?: GeneratedSummaryWhereInput
  }


  /**
   * GeneratedSummary upsert
   */
  export type GeneratedSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * The filter to search for the GeneratedSummary to update in case it exists.
     */
    where: GeneratedSummaryWhereUniqueInput
    /**
     * In case the GeneratedSummary found by the `where` argument doesn't exist, create a new GeneratedSummary with this data.
     */
    create: XOR<GeneratedSummaryCreateInput, GeneratedSummaryUncheckedCreateInput>
    /**
     * In case the GeneratedSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedSummaryUpdateInput, GeneratedSummaryUncheckedUpdateInput>
  }


  /**
   * GeneratedSummary delete
   */
  export type GeneratedSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Filter which GeneratedSummary to delete.
     */
    where: GeneratedSummaryWhereUniqueInput
  }


  /**
   * GeneratedSummary deleteMany
   */
  export type GeneratedSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedSummaries to delete
     */
    where?: GeneratedSummaryWhereInput
  }


  /**
   * GeneratedSummary without action
   */
  export type GeneratedSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
  }



  /**
   * Model GeneratedGhibli
   */

  export type AggregateGeneratedGhibli = {
    _count: GeneratedGhibliCountAggregateOutputType | null
    _min: GeneratedGhibliMinAggregateOutputType | null
    _max: GeneratedGhibliMaxAggregateOutputType | null
  }

  export type GeneratedGhibliMinAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type GeneratedGhibliMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type GeneratedGhibliCountAggregateOutputType = {
    id: number
    userId: number
    prompt: number
    imageUrl: number
    createdAt: number
    _all: number
  }


  export type GeneratedGhibliMinAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    imageUrl?: true
    createdAt?: true
  }

  export type GeneratedGhibliMaxAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    imageUrl?: true
    createdAt?: true
  }

  export type GeneratedGhibliCountAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    imageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedGhibliAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedGhibli to aggregate.
     */
    where?: GeneratedGhibliWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedGhiblis to fetch.
     */
    orderBy?: GeneratedGhibliOrderByWithRelationInput | GeneratedGhibliOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedGhibliWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedGhiblis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedGhiblis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedGhiblis
    **/
    _count?: true | GeneratedGhibliCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedGhibliMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedGhibliMaxAggregateInputType
  }

  export type GetGeneratedGhibliAggregateType<T extends GeneratedGhibliAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedGhibli]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedGhibli[P]>
      : GetScalarType<T[P], AggregateGeneratedGhibli[P]>
  }




  export type GeneratedGhibliGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedGhibliWhereInput
    orderBy?: GeneratedGhibliOrderByWithAggregationInput | GeneratedGhibliOrderByWithAggregationInput[]
    by: GeneratedGhibliScalarFieldEnum[] | GeneratedGhibliScalarFieldEnum
    having?: GeneratedGhibliScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedGhibliCountAggregateInputType | true
    _min?: GeneratedGhibliMinAggregateInputType
    _max?: GeneratedGhibliMaxAggregateInputType
  }

  export type GeneratedGhibliGroupByOutputType = {
    id: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt: Date
    _count: GeneratedGhibliCountAggregateOutputType | null
    _min: GeneratedGhibliMinAggregateOutputType | null
    _max: GeneratedGhibliMaxAggregateOutputType | null
  }

  type GetGeneratedGhibliGroupByPayload<T extends GeneratedGhibliGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedGhibliGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedGhibliGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedGhibliGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedGhibliGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedGhibliSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    prompt?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedGhibli"]>

  export type GeneratedGhibliSelectScalar = {
    id?: boolean
    userId?: boolean
    prompt?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }


  export type $GeneratedGhibliPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedGhibli"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      prompt: string
      imageUrl: string
      createdAt: Date
    }, ExtArgs["result"]["generatedGhibli"]>
    composites: {}
  }


  type GeneratedGhibliGetPayload<S extends boolean | null | undefined | GeneratedGhibliDefaultArgs> = $Result.GetResult<Prisma.$GeneratedGhibliPayload, S>

  type GeneratedGhibliCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneratedGhibliFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneratedGhibliCountAggregateInputType | true
    }

  export interface GeneratedGhibliDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedGhibli'], meta: { name: 'GeneratedGhibli' } }
    /**
     * Find zero or one GeneratedGhibli that matches the filter.
     * @param {GeneratedGhibliFindUniqueArgs} args - Arguments to find a GeneratedGhibli
     * @example
     * // Get one GeneratedGhibli
     * const generatedGhibli = await prisma.generatedGhibli.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratedGhibliFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedGhibliFindUniqueArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GeneratedGhibli that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GeneratedGhibliFindUniqueOrThrowArgs} args - Arguments to find a GeneratedGhibli
     * @example
     * // Get one GeneratedGhibli
     * const generatedGhibli = await prisma.generatedGhibli.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GeneratedGhibliFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedGhibliFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GeneratedGhibli that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliFindFirstArgs} args - Arguments to find a GeneratedGhibli
     * @example
     * // Get one GeneratedGhibli
     * const generatedGhibli = await prisma.generatedGhibli.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratedGhibliFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedGhibliFindFirstArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GeneratedGhibli that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliFindFirstOrThrowArgs} args - Arguments to find a GeneratedGhibli
     * @example
     * // Get one GeneratedGhibli
     * const generatedGhibli = await prisma.generatedGhibli.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GeneratedGhibliFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedGhibliFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GeneratedGhiblis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedGhiblis
     * const generatedGhiblis = await prisma.generatedGhibli.findMany()
     * 
     * // Get first 10 GeneratedGhiblis
     * const generatedGhiblis = await prisma.generatedGhibli.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedGhibliWithIdOnly = await prisma.generatedGhibli.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratedGhibliFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedGhibliFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GeneratedGhibli.
     * @param {GeneratedGhibliCreateArgs} args - Arguments to create a GeneratedGhibli.
     * @example
     * // Create one GeneratedGhibli
     * const GeneratedGhibli = await prisma.generatedGhibli.create({
     *   data: {
     *     // ... data to create a GeneratedGhibli
     *   }
     * })
     * 
    **/
    create<T extends GeneratedGhibliCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedGhibliCreateArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GeneratedGhiblis.
     *     @param {GeneratedGhibliCreateManyArgs} args - Arguments to create many GeneratedGhiblis.
     *     @example
     *     // Create many GeneratedGhiblis
     *     const generatedGhibli = await prisma.generatedGhibli.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratedGhibliCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedGhibliCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GeneratedGhibli.
     * @param {GeneratedGhibliDeleteArgs} args - Arguments to delete one GeneratedGhibli.
     * @example
     * // Delete one GeneratedGhibli
     * const GeneratedGhibli = await prisma.generatedGhibli.delete({
     *   where: {
     *     // ... filter to delete one GeneratedGhibli
     *   }
     * })
     * 
    **/
    delete<T extends GeneratedGhibliDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedGhibliDeleteArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GeneratedGhibli.
     * @param {GeneratedGhibliUpdateArgs} args - Arguments to update one GeneratedGhibli.
     * @example
     * // Update one GeneratedGhibli
     * const generatedGhibli = await prisma.generatedGhibli.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratedGhibliUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedGhibliUpdateArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GeneratedGhiblis.
     * @param {GeneratedGhibliDeleteManyArgs} args - Arguments to filter GeneratedGhiblis to delete.
     * @example
     * // Delete a few GeneratedGhiblis
     * const { count } = await prisma.generatedGhibli.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratedGhibliDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedGhibliDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedGhiblis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedGhiblis
     * const generatedGhibli = await prisma.generatedGhibli.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratedGhibliUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedGhibliUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneratedGhibli.
     * @param {GeneratedGhibliUpsertArgs} args - Arguments to update or create a GeneratedGhibli.
     * @example
     * // Update or create a GeneratedGhibli
     * const generatedGhibli = await prisma.generatedGhibli.upsert({
     *   create: {
     *     // ... data to create a GeneratedGhibli
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedGhibli we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratedGhibliUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedGhibliUpsertArgs<ExtArgs>>
    ): Prisma__GeneratedGhibliClient<$Result.GetResult<Prisma.$GeneratedGhibliPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GeneratedGhiblis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliCountArgs} args - Arguments to filter GeneratedGhiblis to count.
     * @example
     * // Count the number of GeneratedGhiblis
     * const count = await prisma.generatedGhibli.count({
     *   where: {
     *     // ... the filter for the GeneratedGhiblis we want to count
     *   }
     * })
    **/
    count<T extends GeneratedGhibliCountArgs>(
      args?: Subset<T, GeneratedGhibliCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedGhibliCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedGhibli.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedGhibliAggregateArgs>(args: Subset<T, GeneratedGhibliAggregateArgs>): Prisma.PrismaPromise<GetGeneratedGhibliAggregateType<T>>

    /**
     * Group by GeneratedGhibli.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedGhibliGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedGhibliGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedGhibliGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedGhibliGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedGhibliGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedGhibliGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedGhibli model
   */
  readonly fields: GeneratedGhibliFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedGhibli.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedGhibliClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GeneratedGhibli model
   */ 
  interface GeneratedGhibliFieldRefs {
    readonly id: FieldRef<"GeneratedGhibli", 'String'>
    readonly userId: FieldRef<"GeneratedGhibli", 'String'>
    readonly prompt: FieldRef<"GeneratedGhibli", 'String'>
    readonly imageUrl: FieldRef<"GeneratedGhibli", 'String'>
    readonly createdAt: FieldRef<"GeneratedGhibli", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GeneratedGhibli findUnique
   */
  export type GeneratedGhibliFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedGhibli to fetch.
     */
    where: GeneratedGhibliWhereUniqueInput
  }


  /**
   * GeneratedGhibli findUniqueOrThrow
   */
  export type GeneratedGhibliFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedGhibli to fetch.
     */
    where: GeneratedGhibliWhereUniqueInput
  }


  /**
   * GeneratedGhibli findFirst
   */
  export type GeneratedGhibliFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedGhibli to fetch.
     */
    where?: GeneratedGhibliWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedGhiblis to fetch.
     */
    orderBy?: GeneratedGhibliOrderByWithRelationInput | GeneratedGhibliOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedGhiblis.
     */
    cursor?: GeneratedGhibliWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedGhiblis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedGhiblis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedGhiblis.
     */
    distinct?: GeneratedGhibliScalarFieldEnum | GeneratedGhibliScalarFieldEnum[]
  }


  /**
   * GeneratedGhibli findFirstOrThrow
   */
  export type GeneratedGhibliFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedGhibli to fetch.
     */
    where?: GeneratedGhibliWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedGhiblis to fetch.
     */
    orderBy?: GeneratedGhibliOrderByWithRelationInput | GeneratedGhibliOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedGhiblis.
     */
    cursor?: GeneratedGhibliWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedGhiblis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedGhiblis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedGhiblis.
     */
    distinct?: GeneratedGhibliScalarFieldEnum | GeneratedGhibliScalarFieldEnum[]
  }


  /**
   * GeneratedGhibli findMany
   */
  export type GeneratedGhibliFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedGhiblis to fetch.
     */
    where?: GeneratedGhibliWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedGhiblis to fetch.
     */
    orderBy?: GeneratedGhibliOrderByWithRelationInput | GeneratedGhibliOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedGhiblis.
     */
    cursor?: GeneratedGhibliWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedGhiblis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedGhiblis.
     */
    skip?: number
    distinct?: GeneratedGhibliScalarFieldEnum | GeneratedGhibliScalarFieldEnum[]
  }


  /**
   * GeneratedGhibli create
   */
  export type GeneratedGhibliCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * The data needed to create a GeneratedGhibli.
     */
    data: XOR<GeneratedGhibliCreateInput, GeneratedGhibliUncheckedCreateInput>
  }


  /**
   * GeneratedGhibli createMany
   */
  export type GeneratedGhibliCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedGhiblis.
     */
    data: GeneratedGhibliCreateManyInput | GeneratedGhibliCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GeneratedGhibli update
   */
  export type GeneratedGhibliUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * The data needed to update a GeneratedGhibli.
     */
    data: XOR<GeneratedGhibliUpdateInput, GeneratedGhibliUncheckedUpdateInput>
    /**
     * Choose, which GeneratedGhibli to update.
     */
    where: GeneratedGhibliWhereUniqueInput
  }


  /**
   * GeneratedGhibli updateMany
   */
  export type GeneratedGhibliUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedGhiblis.
     */
    data: XOR<GeneratedGhibliUpdateManyMutationInput, GeneratedGhibliUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedGhiblis to update
     */
    where?: GeneratedGhibliWhereInput
  }


  /**
   * GeneratedGhibli upsert
   */
  export type GeneratedGhibliUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * The filter to search for the GeneratedGhibli to update in case it exists.
     */
    where: GeneratedGhibliWhereUniqueInput
    /**
     * In case the GeneratedGhibli found by the `where` argument doesn't exist, create a new GeneratedGhibli with this data.
     */
    create: XOR<GeneratedGhibliCreateInput, GeneratedGhibliUncheckedCreateInput>
    /**
     * In case the GeneratedGhibli was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedGhibliUpdateInput, GeneratedGhibliUncheckedUpdateInput>
  }


  /**
   * GeneratedGhibli delete
   */
  export type GeneratedGhibliDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
    /**
     * Filter which GeneratedGhibli to delete.
     */
    where: GeneratedGhibliWhereUniqueInput
  }


  /**
   * GeneratedGhibli deleteMany
   */
  export type GeneratedGhibliDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedGhiblis to delete
     */
    where?: GeneratedGhibliWhereInput
  }


  /**
   * GeneratedGhibli without action
   */
  export type GeneratedGhibliDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedGhibli
     */
    select?: GeneratedGhibliSelect<ExtArgs> | null
  }



  /**
   * Model GeneratedSVG
   */

  export type AggregateGeneratedSVG = {
    _count: GeneratedSVGCountAggregateOutputType | null
    _min: GeneratedSVGMinAggregateOutputType | null
    _max: GeneratedSVGMaxAggregateOutputType | null
  }

  export type GeneratedSVGMinAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    svg: string | null
    createdAt: Date | null
  }

  export type GeneratedSVGMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    prompt: string | null
    svg: string | null
    createdAt: Date | null
  }

  export type GeneratedSVGCountAggregateOutputType = {
    id: number
    userId: number
    prompt: number
    svg: number
    createdAt: number
    _all: number
  }


  export type GeneratedSVGMinAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    svg?: true
    createdAt?: true
  }

  export type GeneratedSVGMaxAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    svg?: true
    createdAt?: true
  }

  export type GeneratedSVGCountAggregateInputType = {
    id?: true
    userId?: true
    prompt?: true
    svg?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedSVGAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedSVG to aggregate.
     */
    where?: GeneratedSVGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSVGS to fetch.
     */
    orderBy?: GeneratedSVGOrderByWithRelationInput | GeneratedSVGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedSVGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSVGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSVGS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedSVGS
    **/
    _count?: true | GeneratedSVGCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedSVGMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedSVGMaxAggregateInputType
  }

  export type GetGeneratedSVGAggregateType<T extends GeneratedSVGAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedSVG]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedSVG[P]>
      : GetScalarType<T[P], AggregateGeneratedSVG[P]>
  }




  export type GeneratedSVGGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedSVGWhereInput
    orderBy?: GeneratedSVGOrderByWithAggregationInput | GeneratedSVGOrderByWithAggregationInput[]
    by: GeneratedSVGScalarFieldEnum[] | GeneratedSVGScalarFieldEnum
    having?: GeneratedSVGScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedSVGCountAggregateInputType | true
    _min?: GeneratedSVGMinAggregateInputType
    _max?: GeneratedSVGMaxAggregateInputType
  }

  export type GeneratedSVGGroupByOutputType = {
    id: string
    userId: string
    prompt: string
    svg: string
    createdAt: Date
    _count: GeneratedSVGCountAggregateOutputType | null
    _min: GeneratedSVGMinAggregateOutputType | null
    _max: GeneratedSVGMaxAggregateOutputType | null
  }

  type GetGeneratedSVGGroupByPayload<T extends GeneratedSVGGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedSVGGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedSVGGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedSVGGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedSVGGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedSVGSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    prompt?: boolean
    svg?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedSVG"]>

  export type GeneratedSVGSelectScalar = {
    id?: boolean
    userId?: boolean
    prompt?: boolean
    svg?: boolean
    createdAt?: boolean
  }


  export type $GeneratedSVGPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedSVG"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      prompt: string
      svg: string
      createdAt: Date
    }, ExtArgs["result"]["generatedSVG"]>
    composites: {}
  }


  type GeneratedSVGGetPayload<S extends boolean | null | undefined | GeneratedSVGDefaultArgs> = $Result.GetResult<Prisma.$GeneratedSVGPayload, S>

  type GeneratedSVGCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneratedSVGFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneratedSVGCountAggregateInputType | true
    }

  export interface GeneratedSVGDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedSVG'], meta: { name: 'GeneratedSVG' } }
    /**
     * Find zero or one GeneratedSVG that matches the filter.
     * @param {GeneratedSVGFindUniqueArgs} args - Arguments to find a GeneratedSVG
     * @example
     * // Get one GeneratedSVG
     * const generatedSVG = await prisma.generatedSVG.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratedSVGFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSVGFindUniqueArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GeneratedSVG that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GeneratedSVGFindUniqueOrThrowArgs} args - Arguments to find a GeneratedSVG
     * @example
     * // Get one GeneratedSVG
     * const generatedSVG = await prisma.generatedSVG.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GeneratedSVGFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSVGFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GeneratedSVG that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGFindFirstArgs} args - Arguments to find a GeneratedSVG
     * @example
     * // Get one GeneratedSVG
     * const generatedSVG = await prisma.generatedSVG.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratedSVGFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSVGFindFirstArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GeneratedSVG that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGFindFirstOrThrowArgs} args - Arguments to find a GeneratedSVG
     * @example
     * // Get one GeneratedSVG
     * const generatedSVG = await prisma.generatedSVG.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GeneratedSVGFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSVGFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GeneratedSVGS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedSVGS
     * const generatedSVGS = await prisma.generatedSVG.findMany()
     * 
     * // Get first 10 GeneratedSVGS
     * const generatedSVGS = await prisma.generatedSVG.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedSVGWithIdOnly = await prisma.generatedSVG.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratedSVGFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSVGFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GeneratedSVG.
     * @param {GeneratedSVGCreateArgs} args - Arguments to create a GeneratedSVG.
     * @example
     * // Create one GeneratedSVG
     * const GeneratedSVG = await prisma.generatedSVG.create({
     *   data: {
     *     // ... data to create a GeneratedSVG
     *   }
     * })
     * 
    **/
    create<T extends GeneratedSVGCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSVGCreateArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GeneratedSVGS.
     *     @param {GeneratedSVGCreateManyArgs} args - Arguments to create many GeneratedSVGS.
     *     @example
     *     // Create many GeneratedSVGS
     *     const generatedSVG = await prisma.generatedSVG.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratedSVGCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSVGCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GeneratedSVG.
     * @param {GeneratedSVGDeleteArgs} args - Arguments to delete one GeneratedSVG.
     * @example
     * // Delete one GeneratedSVG
     * const GeneratedSVG = await prisma.generatedSVG.delete({
     *   where: {
     *     // ... filter to delete one GeneratedSVG
     *   }
     * })
     * 
    **/
    delete<T extends GeneratedSVGDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSVGDeleteArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GeneratedSVG.
     * @param {GeneratedSVGUpdateArgs} args - Arguments to update one GeneratedSVG.
     * @example
     * // Update one GeneratedSVG
     * const generatedSVG = await prisma.generatedSVG.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratedSVGUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSVGUpdateArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GeneratedSVGS.
     * @param {GeneratedSVGDeleteManyArgs} args - Arguments to filter GeneratedSVGS to delete.
     * @example
     * // Delete a few GeneratedSVGS
     * const { count } = await prisma.generatedSVG.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratedSVGDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GeneratedSVGDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedSVGS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedSVGS
     * const generatedSVG = await prisma.generatedSVG.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratedSVGUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSVGUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneratedSVG.
     * @param {GeneratedSVGUpsertArgs} args - Arguments to update or create a GeneratedSVG.
     * @example
     * // Update or create a GeneratedSVG
     * const generatedSVG = await prisma.generatedSVG.upsert({
     *   create: {
     *     // ... data to create a GeneratedSVG
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedSVG we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratedSVGUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GeneratedSVGUpsertArgs<ExtArgs>>
    ): Prisma__GeneratedSVGClient<$Result.GetResult<Prisma.$GeneratedSVGPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GeneratedSVGS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGCountArgs} args - Arguments to filter GeneratedSVGS to count.
     * @example
     * // Count the number of GeneratedSVGS
     * const count = await prisma.generatedSVG.count({
     *   where: {
     *     // ... the filter for the GeneratedSVGS we want to count
     *   }
     * })
    **/
    count<T extends GeneratedSVGCountArgs>(
      args?: Subset<T, GeneratedSVGCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedSVGCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedSVG.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedSVGAggregateArgs>(args: Subset<T, GeneratedSVGAggregateArgs>): Prisma.PrismaPromise<GetGeneratedSVGAggregateType<T>>

    /**
     * Group by GeneratedSVG.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSVGGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedSVGGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedSVGGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedSVGGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedSVGGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedSVGGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedSVG model
   */
  readonly fields: GeneratedSVGFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedSVG.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedSVGClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GeneratedSVG model
   */ 
  interface GeneratedSVGFieldRefs {
    readonly id: FieldRef<"GeneratedSVG", 'String'>
    readonly userId: FieldRef<"GeneratedSVG", 'String'>
    readonly prompt: FieldRef<"GeneratedSVG", 'String'>
    readonly svg: FieldRef<"GeneratedSVG", 'String'>
    readonly createdAt: FieldRef<"GeneratedSVG", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GeneratedSVG findUnique
   */
  export type GeneratedSVGFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSVG to fetch.
     */
    where: GeneratedSVGWhereUniqueInput
  }


  /**
   * GeneratedSVG findUniqueOrThrow
   */
  export type GeneratedSVGFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSVG to fetch.
     */
    where: GeneratedSVGWhereUniqueInput
  }


  /**
   * GeneratedSVG findFirst
   */
  export type GeneratedSVGFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSVG to fetch.
     */
    where?: GeneratedSVGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSVGS to fetch.
     */
    orderBy?: GeneratedSVGOrderByWithRelationInput | GeneratedSVGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedSVGS.
     */
    cursor?: GeneratedSVGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSVGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSVGS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedSVGS.
     */
    distinct?: GeneratedSVGScalarFieldEnum | GeneratedSVGScalarFieldEnum[]
  }


  /**
   * GeneratedSVG findFirstOrThrow
   */
  export type GeneratedSVGFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSVG to fetch.
     */
    where?: GeneratedSVGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSVGS to fetch.
     */
    orderBy?: GeneratedSVGOrderByWithRelationInput | GeneratedSVGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedSVGS.
     */
    cursor?: GeneratedSVGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSVGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSVGS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedSVGS.
     */
    distinct?: GeneratedSVGScalarFieldEnum | GeneratedSVGScalarFieldEnum[]
  }


  /**
   * GeneratedSVG findMany
   */
  export type GeneratedSVGFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * Filter, which GeneratedSVGS to fetch.
     */
    where?: GeneratedSVGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSVGS to fetch.
     */
    orderBy?: GeneratedSVGOrderByWithRelationInput | GeneratedSVGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedSVGS.
     */
    cursor?: GeneratedSVGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSVGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSVGS.
     */
    skip?: number
    distinct?: GeneratedSVGScalarFieldEnum | GeneratedSVGScalarFieldEnum[]
  }


  /**
   * GeneratedSVG create
   */
  export type GeneratedSVGCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * The data needed to create a GeneratedSVG.
     */
    data: XOR<GeneratedSVGCreateInput, GeneratedSVGUncheckedCreateInput>
  }


  /**
   * GeneratedSVG createMany
   */
  export type GeneratedSVGCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedSVGS.
     */
    data: GeneratedSVGCreateManyInput | GeneratedSVGCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GeneratedSVG update
   */
  export type GeneratedSVGUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * The data needed to update a GeneratedSVG.
     */
    data: XOR<GeneratedSVGUpdateInput, GeneratedSVGUncheckedUpdateInput>
    /**
     * Choose, which GeneratedSVG to update.
     */
    where: GeneratedSVGWhereUniqueInput
  }


  /**
   * GeneratedSVG updateMany
   */
  export type GeneratedSVGUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedSVGS.
     */
    data: XOR<GeneratedSVGUpdateManyMutationInput, GeneratedSVGUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedSVGS to update
     */
    where?: GeneratedSVGWhereInput
  }


  /**
   * GeneratedSVG upsert
   */
  export type GeneratedSVGUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * The filter to search for the GeneratedSVG to update in case it exists.
     */
    where: GeneratedSVGWhereUniqueInput
    /**
     * In case the GeneratedSVG found by the `where` argument doesn't exist, create a new GeneratedSVG with this data.
     */
    create: XOR<GeneratedSVGCreateInput, GeneratedSVGUncheckedCreateInput>
    /**
     * In case the GeneratedSVG was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedSVGUpdateInput, GeneratedSVGUncheckedUpdateInput>
  }


  /**
   * GeneratedSVG delete
   */
  export type GeneratedSVGDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
    /**
     * Filter which GeneratedSVG to delete.
     */
    where: GeneratedSVGWhereUniqueInput
  }


  /**
   * GeneratedSVG deleteMany
   */
  export type GeneratedSVGDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedSVGS to delete
     */
    where?: GeneratedSVGWhereInput
  }


  /**
   * GeneratedSVG without action
   */
  export type GeneratedSVGDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSVG
     */
    select?: GeneratedSVGSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GeneratedImageScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    prompt: 'prompt',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt'
  };

  export type GeneratedImageScalarFieldEnum = (typeof GeneratedImageScalarFieldEnum)[keyof typeof GeneratedImageScalarFieldEnum]


  export const GeneratedVideoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    prompt: 'prompt',
    videoUrl: 'videoUrl',
    createdAt: 'createdAt'
  };

  export type GeneratedVideoScalarFieldEnum = (typeof GeneratedVideoScalarFieldEnum)[keyof typeof GeneratedVideoScalarFieldEnum]


  export const GeneratedSummaryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    prompt: 'prompt',
    summary: 'summary',
    createdAt: 'createdAt'
  };

  export type GeneratedSummaryScalarFieldEnum = (typeof GeneratedSummaryScalarFieldEnum)[keyof typeof GeneratedSummaryScalarFieldEnum]


  export const GeneratedGhibliScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    prompt: 'prompt',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt'
  };

  export type GeneratedGhibliScalarFieldEnum = (typeof GeneratedGhibliScalarFieldEnum)[keyof typeof GeneratedGhibliScalarFieldEnum]


  export const GeneratedSVGScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    prompt: 'prompt',
    svg: 'svg',
    createdAt: 'createdAt'
  };

  export type GeneratedSVGScalarFieldEnum = (typeof GeneratedSVGScalarFieldEnum)[keyof typeof GeneratedSVGScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type GeneratedImageWhereInput = {
    AND?: GeneratedImageWhereInput | GeneratedImageWhereInput[]
    OR?: GeneratedImageWhereInput[]
    NOT?: GeneratedImageWhereInput | GeneratedImageWhereInput[]
    id?: StringFilter<"GeneratedImage"> | string
    userId?: StringFilter<"GeneratedImage"> | string
    prompt?: StringFilter<"GeneratedImage"> | string
    imageUrl?: StringFilter<"GeneratedImage"> | string
    createdAt?: DateTimeFilter<"GeneratedImage"> | Date | string
  }

  export type GeneratedImageOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedImageWhereInput | GeneratedImageWhereInput[]
    OR?: GeneratedImageWhereInput[]
    NOT?: GeneratedImageWhereInput | GeneratedImageWhereInput[]
    userId?: StringFilter<"GeneratedImage"> | string
    prompt?: StringFilter<"GeneratedImage"> | string
    imageUrl?: StringFilter<"GeneratedImage"> | string
    createdAt?: DateTimeFilter<"GeneratedImage"> | Date | string
  }, "id">

  export type GeneratedImageOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    _count?: GeneratedImageCountOrderByAggregateInput
    _max?: GeneratedImageMaxOrderByAggregateInput
    _min?: GeneratedImageMinOrderByAggregateInput
  }

  export type GeneratedImageScalarWhereWithAggregatesInput = {
    AND?: GeneratedImageScalarWhereWithAggregatesInput | GeneratedImageScalarWhereWithAggregatesInput[]
    OR?: GeneratedImageScalarWhereWithAggregatesInput[]
    NOT?: GeneratedImageScalarWhereWithAggregatesInput | GeneratedImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedImage"> | string
    userId?: StringWithAggregatesFilter<"GeneratedImage"> | string
    prompt?: StringWithAggregatesFilter<"GeneratedImage"> | string
    imageUrl?: StringWithAggregatesFilter<"GeneratedImage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedImage"> | Date | string
  }

  export type GeneratedVideoWhereInput = {
    AND?: GeneratedVideoWhereInput | GeneratedVideoWhereInput[]
    OR?: GeneratedVideoWhereInput[]
    NOT?: GeneratedVideoWhereInput | GeneratedVideoWhereInput[]
    id?: StringFilter<"GeneratedVideo"> | string
    userId?: StringFilter<"GeneratedVideo"> | string
    prompt?: StringFilter<"GeneratedVideo"> | string
    videoUrl?: StringFilter<"GeneratedVideo"> | string
    createdAt?: DateTimeFilter<"GeneratedVideo"> | Date | string
  }

  export type GeneratedVideoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedVideoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedVideoWhereInput | GeneratedVideoWhereInput[]
    OR?: GeneratedVideoWhereInput[]
    NOT?: GeneratedVideoWhereInput | GeneratedVideoWhereInput[]
    userId?: StringFilter<"GeneratedVideo"> | string
    prompt?: StringFilter<"GeneratedVideo"> | string
    videoUrl?: StringFilter<"GeneratedVideo"> | string
    createdAt?: DateTimeFilter<"GeneratedVideo"> | Date | string
  }, "id">

  export type GeneratedVideoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    _count?: GeneratedVideoCountOrderByAggregateInput
    _max?: GeneratedVideoMaxOrderByAggregateInput
    _min?: GeneratedVideoMinOrderByAggregateInput
  }

  export type GeneratedVideoScalarWhereWithAggregatesInput = {
    AND?: GeneratedVideoScalarWhereWithAggregatesInput | GeneratedVideoScalarWhereWithAggregatesInput[]
    OR?: GeneratedVideoScalarWhereWithAggregatesInput[]
    NOT?: GeneratedVideoScalarWhereWithAggregatesInput | GeneratedVideoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedVideo"> | string
    userId?: StringWithAggregatesFilter<"GeneratedVideo"> | string
    prompt?: StringWithAggregatesFilter<"GeneratedVideo"> | string
    videoUrl?: StringWithAggregatesFilter<"GeneratedVideo"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedVideo"> | Date | string
  }

  export type GeneratedSummaryWhereInput = {
    AND?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    OR?: GeneratedSummaryWhereInput[]
    NOT?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    id?: StringFilter<"GeneratedSummary"> | string
    userId?: StringFilter<"GeneratedSummary"> | string
    prompt?: StringFilter<"GeneratedSummary"> | string
    summary?: StringFilter<"GeneratedSummary"> | string
    createdAt?: DateTimeFilter<"GeneratedSummary"> | Date | string
  }

  export type GeneratedSummaryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    summary?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    OR?: GeneratedSummaryWhereInput[]
    NOT?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    userId?: StringFilter<"GeneratedSummary"> | string
    prompt?: StringFilter<"GeneratedSummary"> | string
    summary?: StringFilter<"GeneratedSummary"> | string
    createdAt?: DateTimeFilter<"GeneratedSummary"> | Date | string
  }, "id">

  export type GeneratedSummaryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    summary?: SortOrder
    createdAt?: SortOrder
    _count?: GeneratedSummaryCountOrderByAggregateInput
    _max?: GeneratedSummaryMaxOrderByAggregateInput
    _min?: GeneratedSummaryMinOrderByAggregateInput
  }

  export type GeneratedSummaryScalarWhereWithAggregatesInput = {
    AND?: GeneratedSummaryScalarWhereWithAggregatesInput | GeneratedSummaryScalarWhereWithAggregatesInput[]
    OR?: GeneratedSummaryScalarWhereWithAggregatesInput[]
    NOT?: GeneratedSummaryScalarWhereWithAggregatesInput | GeneratedSummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    userId?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    prompt?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    summary?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedSummary"> | Date | string
  }

  export type GeneratedGhibliWhereInput = {
    AND?: GeneratedGhibliWhereInput | GeneratedGhibliWhereInput[]
    OR?: GeneratedGhibliWhereInput[]
    NOT?: GeneratedGhibliWhereInput | GeneratedGhibliWhereInput[]
    id?: StringFilter<"GeneratedGhibli"> | string
    userId?: StringFilter<"GeneratedGhibli"> | string
    prompt?: StringFilter<"GeneratedGhibli"> | string
    imageUrl?: StringFilter<"GeneratedGhibli"> | string
    createdAt?: DateTimeFilter<"GeneratedGhibli"> | Date | string
  }

  export type GeneratedGhibliOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedGhibliWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedGhibliWhereInput | GeneratedGhibliWhereInput[]
    OR?: GeneratedGhibliWhereInput[]
    NOT?: GeneratedGhibliWhereInput | GeneratedGhibliWhereInput[]
    userId?: StringFilter<"GeneratedGhibli"> | string
    prompt?: StringFilter<"GeneratedGhibli"> | string
    imageUrl?: StringFilter<"GeneratedGhibli"> | string
    createdAt?: DateTimeFilter<"GeneratedGhibli"> | Date | string
  }, "id">

  export type GeneratedGhibliOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    _count?: GeneratedGhibliCountOrderByAggregateInput
    _max?: GeneratedGhibliMaxOrderByAggregateInput
    _min?: GeneratedGhibliMinOrderByAggregateInput
  }

  export type GeneratedGhibliScalarWhereWithAggregatesInput = {
    AND?: GeneratedGhibliScalarWhereWithAggregatesInput | GeneratedGhibliScalarWhereWithAggregatesInput[]
    OR?: GeneratedGhibliScalarWhereWithAggregatesInput[]
    NOT?: GeneratedGhibliScalarWhereWithAggregatesInput | GeneratedGhibliScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedGhibli"> | string
    userId?: StringWithAggregatesFilter<"GeneratedGhibli"> | string
    prompt?: StringWithAggregatesFilter<"GeneratedGhibli"> | string
    imageUrl?: StringWithAggregatesFilter<"GeneratedGhibli"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedGhibli"> | Date | string
  }

  export type GeneratedSVGWhereInput = {
    AND?: GeneratedSVGWhereInput | GeneratedSVGWhereInput[]
    OR?: GeneratedSVGWhereInput[]
    NOT?: GeneratedSVGWhereInput | GeneratedSVGWhereInput[]
    id?: StringFilter<"GeneratedSVG"> | string
    userId?: StringFilter<"GeneratedSVG"> | string
    prompt?: StringFilter<"GeneratedSVG"> | string
    svg?: StringFilter<"GeneratedSVG"> | string
    createdAt?: DateTimeFilter<"GeneratedSVG"> | Date | string
  }

  export type GeneratedSVGOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    svg?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSVGWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedSVGWhereInput | GeneratedSVGWhereInput[]
    OR?: GeneratedSVGWhereInput[]
    NOT?: GeneratedSVGWhereInput | GeneratedSVGWhereInput[]
    userId?: StringFilter<"GeneratedSVG"> | string
    prompt?: StringFilter<"GeneratedSVG"> | string
    svg?: StringFilter<"GeneratedSVG"> | string
    createdAt?: DateTimeFilter<"GeneratedSVG"> | Date | string
  }, "id">

  export type GeneratedSVGOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    svg?: SortOrder
    createdAt?: SortOrder
    _count?: GeneratedSVGCountOrderByAggregateInput
    _max?: GeneratedSVGMaxOrderByAggregateInput
    _min?: GeneratedSVGMinOrderByAggregateInput
  }

  export type GeneratedSVGScalarWhereWithAggregatesInput = {
    AND?: GeneratedSVGScalarWhereWithAggregatesInput | GeneratedSVGScalarWhereWithAggregatesInput[]
    OR?: GeneratedSVGScalarWhereWithAggregatesInput[]
    NOT?: GeneratedSVGScalarWhereWithAggregatesInput | GeneratedSVGScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedSVG"> | string
    userId?: StringWithAggregatesFilter<"GeneratedSVG"> | string
    prompt?: StringWithAggregatesFilter<"GeneratedSVG"> | string
    svg?: StringWithAggregatesFilter<"GeneratedSVG"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedSVG"> | Date | string
  }

  export type GeneratedImageCreateInput = {
    id?: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt?: Date | string
  }

  export type GeneratedImageUncheckedCreateInput = {
    id?: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt?: Date | string
  }

  export type GeneratedImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedImageCreateManyInput = {
    id?: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt?: Date | string
  }

  export type GeneratedImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedVideoCreateInput = {
    id?: string
    userId: string
    prompt: string
    videoUrl: string
    createdAt?: Date | string
  }

  export type GeneratedVideoUncheckedCreateInput = {
    id?: string
    userId: string
    prompt: string
    videoUrl: string
    createdAt?: Date | string
  }

  export type GeneratedVideoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    videoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedVideoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    videoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedVideoCreateManyInput = {
    id?: string
    userId: string
    prompt: string
    videoUrl: string
    createdAt?: Date | string
  }

  export type GeneratedVideoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    videoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedVideoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    videoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryCreateInput = {
    id?: string
    userId: string
    prompt: string
    summary: string
    createdAt?: Date | string
  }

  export type GeneratedSummaryUncheckedCreateInput = {
    id?: string
    userId: string
    prompt: string
    summary: string
    createdAt?: Date | string
  }

  export type GeneratedSummaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryCreateManyInput = {
    id?: string
    userId: string
    prompt: string
    summary: string
    createdAt?: Date | string
  }

  export type GeneratedSummaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedGhibliCreateInput = {
    id?: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt?: Date | string
  }

  export type GeneratedGhibliUncheckedCreateInput = {
    id?: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt?: Date | string
  }

  export type GeneratedGhibliUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedGhibliUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedGhibliCreateManyInput = {
    id?: string
    userId: string
    prompt: string
    imageUrl: string
    createdAt?: Date | string
  }

  export type GeneratedGhibliUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedGhibliUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSVGCreateInput = {
    id?: string
    userId: string
    prompt: string
    svg: string
    createdAt?: Date | string
  }

  export type GeneratedSVGUncheckedCreateInput = {
    id?: string
    userId: string
    prompt: string
    svg: string
    createdAt?: Date | string
  }

  export type GeneratedSVGUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    svg?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSVGUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    svg?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSVGCreateManyInput = {
    id?: string
    userId: string
    prompt: string
    svg: string
    createdAt?: Date | string
  }

  export type GeneratedSVGUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    svg?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSVGUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    svg?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GeneratedImageCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedImageMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedImageMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type GeneratedVideoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedVideoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedVideoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    summary?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    summary?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    summary?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedGhibliCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedGhibliMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedGhibliMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSVGCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    svg?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSVGMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    svg?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSVGMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    prompt?: SortOrder
    svg?: SortOrder
    createdAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GeneratedImageDefaultArgs instead
     */
    export type GeneratedImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneratedImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneratedVideoDefaultArgs instead
     */
    export type GeneratedVideoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneratedVideoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneratedSummaryDefaultArgs instead
     */
    export type GeneratedSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneratedSummaryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneratedGhibliDefaultArgs instead
     */
    export type GeneratedGhibliArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneratedGhibliDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneratedSVGDefaultArgs instead
     */
    export type GeneratedSVGArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneratedSVGDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}